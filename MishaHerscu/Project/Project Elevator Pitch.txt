The final goal of my project is still to be determined through an ongoing discussion at BookBub. However, I can discuss one of the frontrunner ideas here. Any other project I may end up settling on will likely be some part of this or related to it somehow. It will also almost certainly use the same data. 

The project idea I will discuss is to implement a book recommendation engine for Bookbub users. I want to be able to show a personalized list of recommended books to all users, in descending order of how much we think they would like that book.

For context, BookBub is a book discovery website. Our core product is a daily email sent to our seven million users with discounted book selections that our editors choose for each genre. We only send people books in genres they indicate they are interested in when they sign up. Publishers submit books to us and our editors select ~10% to be featured in the email. The publishers pay us to send out only the books we select.

Right now we send the same book to everyone who is signed up for a category, and the price reflects the size of the category and the expected number of books sold. In the future we would like to show users a list of top rated books for them, based on all the data we have on their interests and behavior. These wouldn't be emailed out, but would be displayed on the website, kind of like Netflix.

I have data on users in the Redshift database that my company has. It is a relational database that I access with PostgreSQL. It should be fairly easy to get it into pandas dataframes. The data includes users, which genres they indicated interest in, every book they click on, every author they follow, and every book they bookmark as something they would like to see sent out. I think I may start with just genre interests and maybe clicks, and if I have time, I will add layers that use the other data.

The tricky part is going to be getting data on all the books we haven't run, since there are no clicks and they haven't been formally assigned to a genre for us. However, we do have the tags on those books, based on Amazon tags, and we also have book descriptions. I think I could use some kind of natural language processing to map each of these books into one of our genres and maybe see how close they are (in a euclidean distance sense) to books that have run. 

We haven't actually done the recommendation engine unit in class yet, but I think I will also get a lot of ideas from that.

In terms of the 2x2 grid from class, I am not completely sure, but I think it is supervised because the labels are all known. I would also say it is a continuous problem for each user rather than categorical, since I am going to give a score somewhere on the number line to every book for every user. To a lesser degree it may be categorical because I may also have a binary line where I say that this list is the "suggested list" and everything else is not. However, that is just drawing a line somewhere on the number line of scores, so it is a continuous problem, mapping a bunch of data to a score. If that is right, than I am kind of in the "regression" box with the continuous and supervised problems, but I think this is going to get more complicated than anything we have done so far in class. I am looking forward to doing the unit on recommendation engines.

I chose this project because I work at BookBub and we are in the middle of trying to expand our usefulness with new products. We want to move beyond just being a deal email and become a more useful website for book discovery. One of the core new features will need to be a recommendation engine.